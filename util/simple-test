#! /bin/sh
status=0
umask 077
unset IFS
set -e

recursive=
log_opt=-E

while :; do
	case $1 in
	-q|-E)	log_opt=$1;;
	-r)	recursive=1;;
	*)	break;;
	esac
	shift
done

D=${1:-.}
case $D in /*);; *) D=$(pwd)/$D;; esac

mk_key(){
	"$D/dropbearkey" -t ed25519 -f "$1" &&
	"$D/dropbearkey" -y -f "$1" > "$1.pub+" &&
	grep ^ssh "$1.pub+" > "$1.pub"
	rm "$1.pub+"
}
init_keys(){
	mk_key key
	set $(cat key.pub)
	echo "localhost $1 $2" >> known_hosts
	echo "127.0.0.1 $1 $2" >> known_hosts
	cat key.pub > auth_keys
}

if ! [ "$recursive" ]; then
	tmpdir=$(mktemp -d)
	trap 'set +e; rm -fr "$tmpdir"' EXIT INT TERM

	cp "$0" "$tmpdir/simple-test"
	cd "$tmpdir"
	init_keys
	"$D/dbclient" -t -i key -o UserKnownHostsFile=known_hosts \
		-J "$D/dropbear -iF $log_opt -r key -A key.pub" \
		localhost "$tmpdir/simple-test -r $log_opt $D $tmpdir"
	exit
else
	T=${2:-.}
	cd "$T"
fi

######################################################################
green='\033[1;32m'
red='\033[1;31m'
norm='\033[m'
bold='\033[1m'
rev='\033[7m'

failed=0
_check(){
	pat=$(printf "<$1>"); shift
	res="<$(
	  set +e; exec 2>&1
	  out=$(case $# in (1) eval "$1";; (*) "$@";; esac; echo ":$?")
	  echo ":$out"
	)>" && :
	case $res in
	$pat)	printf "${green}OK${norm}\n";;
	*)	printf "${red}FAIL${norm}\n  %-10s%s\n  %-10s%s\n" \
			output "$res" \
			expected "$pat"
			#output "$(printf %s "$res" | cat -v)" \
			#expected "$(printf %s "$pat" | cat -v)"
		failed=$((failed + 1))
		;;
	esac
}
showcmd() {
	cmd=$1; shift
	printf "${bold}%s" "$cmd"; printf ' %s' "$@"; printf "${norm}\n"
}
v(){ showcmd "$@"; "$@"; }
check(){ showcmd check "$@"; _check "$@"; }

#check :out:0	printf out
#check :out:0	printf err

######################################################################
onexit(){
	status=$?
	trap : TERM; trap - EXIT
	kill -TERM -$$
	wait
	case $status:$failed in
	0:0)	printf "\n$rev${green}EVERYTHING OK$norm\n";;
	*)	printf "\n$rev${red}STATUS $status, FAILED $failed$norm\n"
		exit 1
		;;
	esac
}
trap onexit EXIT
trap exit INT TERM

port=2222
I=" -i key"
P=" -p $port"
H=" -o UserKnownHostsFile=known_hosts"
delay='sleep .1 2>/dev/null || sleep 1'

pwd
mkdir multi
for f in scp dropbear dbclient; do ln -s "$D/dropbearmulti" "multi/$f"; done


v multi/dropbear "$log_opt" -a -mF -p $port -r key -A auth_keys &
for a in 1st 2nd 3rd; do
	v multi/dbclient $H$I$P localhost : $a && break
	eval "$delay"
done

dssh(){ "$D/dbclient" "$@"; }
hcheck(){
	showcmd hcheck "$@"
	case $1 in
	'%')	t=hcheck; p=:$t:0 ;;
	*:*)	p=$1; t=${p#*:}; t=${t%:*};;
	*)	t=$1; p=:$t:0 ;;
	esac
	shift
	_check "$p" dssh "$@" localhost printf "$t"
}

hcheck % $H$I$P

HOME=. check '*key accepted unconditionally*:test:0' \
	dssh $I$P -y localhost printf test
check ':test\r\n:0' \
	dssh $H$I -t -p "$port" localhost echo test
check ':foobar\n:0' \
	dssh $H$I -p "$port" localhost "{ $delay; echo bar; } & printf foo"
check '* 9999 2222\n:* 9999 * 2222\n:0' \
	dssh $H$I -p "$port" -b 127.0.0.1:9999 127.0.0.1 \
		'echo $SSH_CONNECTION; echo >&2 $SSH_CLIENT'

v dssh $H$P$I \
	-R 8888:localhost:$port \
	-L 7777:localhost:$port \
	-R 0:localhost:$port \
	-L 0:localhost:$port \
	-p "$port" -N localhost 2>&1 | tee stderr &
set -- NO
local_port=no_local_port
remote_port=no_remote_port
for a in x x x; do
	set -- $(grep 'Allocated port [0-9]* for [lr][oe]' stderr | cut -d" " -f4,6) 2>/dev/null
	[ "$#" -gt 0 ] && { eval "${2}_port=$1; ${4}_port=$3"; break; }
	eval "$delay"
done

check '*Remote TCP forward request failed*::1' \
	dssh $H$I -p $port -o ExitOnForwardFailure=yes -R 8888:localhost:$port \
		localhost echo OK
hcheck % $H$I -p 7777
hcheck % $H$I -p 8888
hcheck % $H$I -p $remote_port
hcheck % $H$I -p $local_port

##################################################################

echo first > local.txt
v "$D/dropbearmulti" scp -i key -o UserKnownHostsFile=known_hosts \
	-P $port local.txt localhost:$T/remote.txt && :
check ::0 cmp local.txt remote.txt

echo second > local.txt
v multi/scp -i key -o UserKnownHostsFile=known_hosts \
	-P $port local.txt localhost:$T/remote.txt && :
check ::0 cmp local.txt remote.txt

##################################################################

check :test:0 \
	dssh $H$I -J "$D/dropbear -iFq -r key -A key.pub" localhost printf test
dssh_pty(){
	dssh $H$I -t -J "$D/dropbear -iFq -r key -A key.pub" localhost \
		"cd $T && { $D/dbclient -i key -o UserKnownHostsFile=known_hosts $*; }"
}
check ':1\r\ntest\r\n:0' \
	'echo 1 | dssh_pty -p $port localhost echo test'
check ':echo test\r\n*test\r\n*test\r\n*:0' \
	'{ printf "echo test\rexit\r"; } | dssh_pty -p $port localhost'

##################################################################

port=2223
if unshare 2>/dev/null -Ucm --keep-caps sh -c "
	mount -B /dev/null /dev/ptmx
	$D/dropbear -mqF -p $port -r key -A key.pub &
	$delay
	"
then
	check '*PTY allocation request failed*:test\n:0' \
		dssh $H$I -t -p $port localhost echo test
	check ':true\r\n*PTY allocation request failed*:0' \
		'printf "true\rexit\r" | dssh_pty -p $port localhost'
else
	echo >&2 no unshare, skipping the no /dev/ptmx part
fi
