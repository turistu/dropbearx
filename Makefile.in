# This Makefile is for Dropbear SSH Server and Client
# @configure_input@

PROGRAMS=dropbear dbclient dropbearkey dropbearconvert scp

srcdir=@srcdir@/src

STATIC_LTC=libtomcrypt/libtomcrypt.a
STATIC_LTM=libtommath/libtommath.a

LIBTOM_LIBS=@LIBTOM_LIBS@
CPPFLAGS+=@CPPFLAGS@ -I.

ifeq (@BUNDLED_LIBTOM@, 1)
	LIBTOM_DEPS=$(STATIC_LTC) $(STATIC_LTM)
	LIBTOM_CLEAN=ltc-clean ltm-clean
	CPPFLAGS+=-I@srcdir@/libtomcrypt/src/headers/ -I@srcdir@/libtommath
	LIBTOM_LIBS=$(STATIC_LTC) $(STATIC_LTM)
endif

OPTION_HEADERS = default_options_guard.h $(srcdir)/sysoptions.h
ifneq ($(wildcard @srcdir@/localoptions.h),)
	CPPFLAGS+=-DLOCALOPTIONS_H_EXISTS -I@srcdir@
	OPTION_HEADERS += @srcdir@/localoptions.h
endif

MAN_DIR=@srcdir@/manpages

COMMONOBJS=dbutil.o buffer.o dbhelpers.o \
		dss.o bignum.o \
		signkey.o rsa.o dbrandom.o \
		queue.o \
		atomicio.o compat.o fake-rfc2553.o \
		ltc_prng.o ecc.o ecdsa.o sk-ecdsa.o crypto_desc.o \
		curve25519.o ed25519.o sk-ed25519.o \
		dbmalloc.o \
		gensignkey.o gendss.o genrsa.o gened25519.o

SVROBJS=svr-kex.o svr-auth.o pty.o \
		svr-authpasswd.o svr-authpubkey.o svr-authpubkeyoptions.o svr-session.o svr-service.o \
		svr-chansession.o svr-runopts.o svr-agentfwd.o svr-main.o svr-x11fwd.o\
		svr-tcpfwd.o svr-authpam.o

CLIOBJS=cli-main.o cli-auth.o cli-authpasswd.o cli-kex.o \
		cli-session.o cli-runopts.o cli-chansession.o \
		cli-authpubkey.o cli-tcpfwd.o cli-channel.o cli-authinteract.o \
		cli-agentfwd.o

CLISVROBJS=common-session.o packet.o common-algo.o common-kex.o \
		common-channel.o common-chansession.o termcodes.o loginrec.o \
		tcp-accept.o listener.o process-packet.o dh_groups.o \
		common-runopts.o circbuffer.o list.o netio.o chachapoly.o gcm.o

KEYOBJS=dropbearkey.o

CONVERTOBJS=dropbearconvert.o keyimport.o signkey_ossh.o

SCPOBJS=scp.o progressmeter.o atomicio.o scpmisc.o compat.o

ifeq (@DROPBEAR_FUZZ@, 1)
	allobjs = $(addprefix fuzz/, $(COMMONOBJS) $(CLISVROBJS) $(CLIOBJS) $(SVROBJS)) fuzz/fuzz-common.o  fuzz/fuzz-wrapfd.o @CRYPTLIB@
	allobjs:=$(subst fuzz/svr-main.o, ,$(allobjs))
	allobjs:=$(subst fuzz/cli-main.o, ,$(allobjs))

	dropbearobjs=$(allobjs) svr-main.o
	dbclientobjs=$(allobjs) cli-main.o
	dropbearkeyobjs=$(allobjs) $(KEYOBJS)
	dropbearconvertobjs=$(allobjs) $(CONVERTOBJS)
	# CXX only set when fuzzing
	CXX=@CXX@
	FUZZ_CLEAN=fuzz-clean
else
	dropbear_objs = $(COMMONOBJS) $(CLISVROBJS) $(SVROBJS)
	dbclient_objs = $(COMMONOBJS) $(CLISVROBJS) $(CLIOBJS)
	dropbearkey_objs = $(COMMONOBJS) $(KEYOBJS)
	dropbearconvert_objs = $(COMMONOBJS) $(CONVERTOBJS)
	scp_objs = $(SCPOBJS)
endif

ifeq (@DROPBEAR_PLUGIN@, 1)
	# rdynamic makes all the global symbols of dropbear available to all the loaded shared libraries
	# this allow a plugin to reuse existing crypto/utilities like base64_decode/base64_encode without
	# the need to rewrite them.
	PLUGIN_LIBS=-ldl -rdynamic
else
	PLUGIN_LIBS=
endif

prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir = @datarootdir@
bindir=@bindir@
sbindir=@sbindir@
mandir=@mandir@

.DELETE_ON_ERROR:

CC=@CC@
AR=@AR@
RANLIB=@RANLIB@
STRIP=@STRIP@
INSTALL=@INSTALL@
CPPFLAGS+=-I$(srcdir) -I@abs_top_builddir@
CFLAGS+=@CFLAGS@ @ZLIB_CFLAGS@
LIBS+=@LIBS@ @ZLIB_LIBS@
LDFLAGS=@LDFLAGS@

EXEEXT=@EXEEXT@

STATIC=@STATIC@

# whether we're building client, server, or both for the common objects.
# evilness so we detect 'dropbear' by itself as a word
ifneq (,$(strip $(foreach prog, $(PROGRAMS), $(findstring ZdropbearZ, Z$(prog)Z))))
	CPPFLAGS+= -DDROPBEAR_SERVER
endif
ifneq (,$(strip $(foreach prog, $(PROGRAMS), $(findstring ZdbclientZ, Z$(prog)Z))))
	CPPFLAGS+= -DDROPBEAR_CLIENT
endif

# these are exported so that libtomcrypt's makefile will use them
export CC
export CFLAGS
export CPPFLAGS
export RANLIB AR STRIP

ifeq ($(STATIC), 1)
	LDFLAGS+=-static
endif

# for the scp progress meter. The -D doesn't affect anything else.
ifeq ($(SCPPROGRESS), 1)
	CPPFLAGS+=-DPROGRESS_METER
endif

everything: separate multi
install: install-separate install-multi

separate: $(PROGRAMS)
install-separate: $(addprefix inst_, $(PROGRAMS))

multi: dropbearmulti
install-multi: inst_dropbearmulti

# for simplicity assume all source depends on all headers
HEADERS=$(wildcard $(srcdir)/*.h *.h) $(OPTION_HEADERS)

MULTI_CPPFLAGS = $(addprefix -DDBMULTI_, $(PROGRAMS)) -DDROPBEAR_MULTI

sep-obj multi-obj:
	mkdir -p $@

sep-obj/%.o: $(srcdir)/%.c $(HEADERS) | sep-obj
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

fuzz/%.o: $(srcdir)/%.c $(HEADERS)
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

fuzz/%.o: $(srcdir)/../fuzz/%.c $(HEADERS)
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

multi-obj/%.o: $(srcdir)/%.c $(HEADERS) | multi-obj
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $(MULTI_CPPFLAGS) $< -o $@


default_options_guard.h: $(srcdir)/default_options.h
	@echo Creating $@
	@printf "/*\n > > > Do not edit this file (default_options_guard.h) < < <\nGenerated from "$^"\nLocal customisation goes in localoptions.h\n*/\n\n" > $@.tmp
	@$(srcdir)/ifndef_wrapper.sh < $^ >> $@.tmp
	mv $@.tmp $@

strip: $(PROGRAMS)
	$(STRIP) $(addsuffix $(EXEEXT), $(PROGRAMS))

insmultidropbear: dropbearmulti$(EXEEXT)
	$(INSTALL) -d $(DESTDIR)$(sbindir)
	-rm -f $(DESTDIR)$(sbindir)/dropbear$(EXEEXT)
	-ln -s $(bindir)/dropbearmulti$(EXEEXT) $(DESTDIR)$(sbindir)/dropbear$(EXEEXT)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man8
	$(INSTALL) -m 644 $(MAN_DIR)/dropbear.8  $(DESTDIR)$(mandir)/man8/dropbear.8

insmulti%: dropbearmulti$(EXEEXT)
	$(INSTALL) -d $(DESTDIR)$(bindir)
	-rm -f $(DESTDIR)$(bindir)/$*$(EXEEXT)
	-ln -s $(bindir)/dropbearmulti$(EXEEXT) $(DESTDIR)$(bindir)/$*$(EXEEXT)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man1
	if test -e $(MAN_DIR)/$*.1; then $(INSTALL) -m 644 $(MAN_DIR)/$*.1 $(DESTDIR)$(mandir)/man1/$*.1; fi

# dropbear should go in sbin, so it needs a separate rule
inst_dropbear: dropbear
	$(INSTALL) -d $(DESTDIR)$(sbindir)
	$(INSTALL) dropbear$(EXEEXT) $(DESTDIR)$(sbindir)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man8
	$(INSTALL) -m 644 $(MAN_DIR)/dropbear.8 $(DESTDIR)$(mandir)/man8/dropbear.8

inst_%: %
	$(INSTALL) -d $(DESTDIR)$(bindir)
	$(INSTALL) $*$(EXEEXT) $(DESTDIR)$(bindir)
	if test -e $(MAN_DIR)/$*.1; then \
		$(INSTALL) -d $(DESTDIR)$(mandir)/man1; \
		$(INSTALL) -m 644 $(MAN_DIR)/$*.1 $(DESTDIR)$(mandir)/man1/$*.1;\
	fi

multi_objs=$(addprefix multi-obj/, dbmulti.o $(sort $(foreach prog, $(PROGRAMS), $($(prog)_objs))))

sep_dropbear_objs = $(addprefix sep-obj/, $(dropbear_objs))
dropbear: $(sep_dropbear_objs)

sep_dbclient_objs = $(addprefix sep-obj/, $(dbclient_objs))
dbclient: $(sep_dbclient_objs)

sep_dropbearkey_objs = $(addprefix sep-obj/, $(dropbearkey_objs))
dropbearkey: $(sep_dropbearkey_objs)

sep_dropbearconvert_objs = $(addprefix sep-obj/, $(dropbearconvert_objs))
dropbearconvert: $(sep_dropbearconvert_objs)

sep_scp_objs = $(addprefix sep-obj/, $(scp_objs))
scp: $(sep_scp_objs)

dropbear: $(HEADERS) $(LIBTOM_DEPS) Makefile
	$(CC) $(LDFLAGS) -o $@$(EXEEXT) $(sep_$@_objs) $(LIBTOM_LIBS) $(LIBS) @CRYPTLIB@ $(PLUGIN_LIBS)

dbclient dropbearkey dropbearconvert: $(HEADERS) $(LIBTOM_DEPS) Makefile
	$(CC) $(LDFLAGS) -o $@$(EXEEXT) $(sep_$@_objs) $(LIBTOM_LIBS) $(LIBS)

# scp doesn't use the libs so is special.
scp: $(HEADERS) Makefile
	$(CC) $(LDFLAGS) -o $@$(EXEEXT) $(sep_$@_objs)

dropbearmulti$(EXEEXT): $(HEADERS) $(multi_objs) $(LIBTOM_DEPS) Makefile
	$(CC) $(LDFLAGS) -o $@ $(multi_objs) $(LIBTOM_LIBS) $(LIBS) @CRYPTLIB@

$(STATIC_LTC): $(OPTION_HEADERS)
	$(MAKE) -C libtomcrypt

$(STATIC_LTM): $(OPTION_HEADERS)
	$(MAKE) -C libtommath

.PHONY : clean sizes thisclean distclean tidy ltc-clean ltm-clean lint check

ltc-clean:
	$(MAKE) -C libtomcrypt clean

ltm-clean:
	$(MAKE) -C libtommath clean

sizes: dropbear
	objdump -t dropbear|grep ".text"|cut -d "." -f 2|sort -rn

clean: $(LIBTOM_CLEAN) $(FUZZ_CLEAN) thisclean

thisclean:
	rm -f dropbear$(EXEEXT) dbclient$(EXEEXT) dropbearkey$(EXEEXT) \
			dropbearconvert$(EXEEXT) scp$(EXEEXT) scp-progress$(EXEEXT) \
			dropbearmulti$(EXEEXT) *.o *.da *.bb *.bbg *.prof
	rm -fr multi-obj sep-obj

distclean: clean tidy
	rm -f config.h
	rm -f Makefile libtommath/Makefile libtomcrypt/Makefile test/Makefile
	rm -f default_options_guard.h
	rm -fr config.log config.status autom4te.cache

gitclean: distclean
	rm -f aclocal.m4 config.h.in configure
	rm -f config.guess config.sub install[.-]sh

tidy:
	rm -f *~ *.gcov */*~

lint:
	cd $(srcdir); ./dropbear_lint.sh

check: lint
	make -C test

## Fuzzing targets

# list of fuzz targets
FUZZ_TARGETS=fuzzer-preauth fuzzer-pubkey fuzzer-verify fuzzer-preauth_nomaths \
	fuzzer-kexdh fuzzer-kexecdh fuzzer-kexcurve25519 fuzzer-client fuzzer-client_nomaths \
	fuzzer-postauth_nomaths

FUZZER_OPTIONS = $(addsuffix .options, $(FUZZ_TARGETS))
FUZZ_OBJS = $(addprefix fuzz/,$(addsuffix .o,$(FUZZ_TARGETS))) \
	fuzz/fuzz-sshpacketmutator.o

list-fuzz-targets:
	@echo $(FUZZ_TARGETS)

# fuzzers that don't use libfuzzer, just a standalone harness that feeds inputs
fuzzstandalone: FUZZLIB=fuzz/fuzz-harness.o
fuzzstandalone: fuzz/fuzz-harness.o fuzz-targets

# Build all the fuzzers. Usually like
#   make fuzz-targets FUZZLIB=-lFuzzer.a
# the library provides main(). Otherwise
#   make fuzzstandalone
# provides a main in fuzz-harness.c
fuzz-targets: $(FUZZ_TARGETS) $(FUZZER_OPTIONS)

$(FUZZ_TARGETS): $(LIBTOM_DEPS) $(allobjs) $(FUZZ_OBJS)
	$(CXX) $(CXXFLAGS) fuzz/$@.o $(LDFLAGS) $(allobjs) -o $@$(EXEEXT) $(LIBTOM_LIBS) $(LIBS) $(FUZZLIB) @CRYPTLIB@

# fuzzers that use the custom mutator - these expect a SSH network stream
MUTATOR_FUZZERS=fuzzer-client fuzzer-client_nomaths \
	fuzzer-preauth fuzzer-preauth_nomaths fuzzer-postauth_nomaths

# Skip custom mutators for -fsanitize-memory since libfuzzer doesn't initialise memory
# Pending fix for it https://github.com/google/oss-fuzz/issues/4605
ifeq (,$(findstring fsanitize=memory, $(CFLAGS)))
$(MUTATOR_FUZZERS): allobjs += fuzz/fuzz-sshpacketmutator.o
endif

fuzzer-%.options: Makefile
	echo "[libfuzzer]"               > $@
	echo "max_len = 50000"          >> $@

# run this to update hardcoded hostkeys for for fuzzing.
# hostkeys.c is checked in to hg.
fuzz-hostkeys:
	dropbearkey -t rsa -f keyr
	dropbearkey -t dss -f keyd
	dropbearkey -t ecdsa -size 256 -f keye
	dropbearkey -t ed25519 -f keyed25519
	echo > hostkeys.c
	/usr/bin/xxd -i -a keyr >> hostkeys.c
	/usr/bin/xxd -i -a keye >> hostkeys.c
	/usr/bin/xxd -i -a keyd >> hostkeys.c
	/usr/bin/xxd -i -a keyed25519 >> hostkeys.c

fuzz-clean:
	-rm -f fuzz/*.o $(FUZZ_TARGETS) $(FUZZER_OPTIONS)
